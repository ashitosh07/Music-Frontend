{
  "version": 3,
  "sources": ["../../node_modules/react-type-animation/node_modules/@camwiegert/typical/typical.js", "../../node_modules/react-type-animation/node_modules/style-inject/dist/style-inject.es.js", "../../node_modules/react-type-animation/src/index.js"],
  "sourcesContent": ["export async function type(node, ...args) {\n    for (const arg of args) {\n        switch (typeof arg) {\n            case 'string':\n                await edit(node, arg);\n                break;\n            case 'number':\n                await wait(arg);\n                break;\n            case 'function':\n                await arg(node, ...args);\n                break;\n            default:\n                await arg;\n        }\n    }\n}\n\nasync function edit(node, text) {\n    const overlap = getOverlap(node.textContent, text);\n    await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\n\nasync function wait(ms) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function perform(node, edits, speed = 60) {\n    for (const op of editor(edits)) {\n        op(node);\n        await wait(speed + speed * (Math.random() - 0.5));\n    }\n}\n\nexport function* editor(edits) {\n    for (const edit of edits) {\n        yield (node) => requestAnimationFrame(() => node.textContent = edit);\n    }\n}\n\nexport function* writer([...text], startIndex = 0, endIndex = text.length) {\n    while (startIndex < endIndex) {\n        yield text.slice(0, ++startIndex).join('');\n    }\n}\n\nexport function* deleter([...text], startIndex = 0, endIndex = text.length) {\n    while (endIndex > startIndex) {\n        yield text.slice(0, --endIndex).join('');\n    }\n}\n\nexport function getOverlap(start, [...end]) {\n    return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\n", "function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n", "import { type, type as typeLoop } from '@camwiegert/typical';\nimport React, { useRef, useEffect, memo } from 'react';\n\nimport styles from './styles.css';\n\nconst TypeAnimation = ({\n  sequence,\n  repeat,\n  className,\n  wrapper = 'p',\n  cursor = true\n}) => {\n  const typeRef = useRef(null);\n  const baseStyle = styles.type;\n\n  let finalClassName;\n\n  if (className && className.length > 0) {\n    if (!cursor) {\n      finalClassName = className;\n    } else {\n      finalClassName = `${baseStyle} ${className}`;\n    }\n  } else {\n    if (!cursor) {\n      finalClassName = '';\n    } else {\n      finalClassName = baseStyle;\n    }\n  }\n\n  useEffect(() => {\n    if (repeat === Infinity) {\n      type(typeRef.current, ...sequence, typeLoop);\n    } else if (typeof repeat === 'number') {\n      type(\n        typeRef.current,\n        ...Array(repeat)\n          .fill(sequence)\n          .flat()\n      );\n    } else {\n      type(typeRef.current, ...sequence);\n    }\n  });\n\n  const Wrapper = wrapper;\n  return <Wrapper className={finalClassName} ref={typeRef} />;\n};\n\nexport default memo(TypeAnimation);\n"],
  "mappings": "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",
  "names": ["edit", "css", "TypeAnimation", "sequence", "repeat", "className", "wrapper", "cursor", "typeRef", "useRef", "baseStyle", "styles", "type", "finalClassName", "length", "Infinity", "current", "typeLoop", "Array", "fill", "flat", "Wrapper", "React", "memo"]
}
