{
  "version": 3,
  "sources": ["../../node_modules/react-modern-drawer/src/index.tsx"],
  "sourcesContent": ["import React, { useEffect, useMemo, useRef } from 'react'\nimport type { CSSProperties } from 'react'\nimport './styles.scss'\n\ntype Props = {\n    open: boolean\n    onClose?: () => void\n    direction: 'left' | 'right' | 'top' | 'bottom'\n    lockBackgroundScroll?: boolean\n    children?: React.ReactNode\n    duration?: number\n    overlayOpacity?: number\n    overlayColor?: String\n    enableOverlay?: boolean\n    style?: React.CSSProperties\n    zIndex?: number\n    size?: number | string\n    className?: string\n    customIdSuffix?: string\n    overlayClassName?: string\n}\n\nconst getDirectionStyle = (\n    dir: string,\n    size?: number | string,\n): {} | React.CSSProperties => {\n    switch (dir) {\n        case 'left':\n            return {\n                top: 0,\n                left: 0,\n                transform: 'translate3d(-100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'right':\n            return {\n                top: 0,\n                right: 0,\n                transform: 'translate3d(100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'bottom':\n            return {\n                left: 0,\n                right: 0,\n                bottom: 0,\n                transform: 'translate3d(0, 100%, 0)',\n                width: '100%',\n                height: size,\n            }\n        case 'top':\n            return {\n                left: 0,\n                right: 0,\n                top: 0,\n                transform: 'translate3d(0, -100%, 0)',\n                width: '100%',\n                height: size,\n            }\n\n        default:\n            return {}\n    }\n}\n\nconst EZDrawer: React.FC<Props> = (props) => {\n    const {\n        open,\n        onClose = () => {},\n        children,\n        style,\n        enableOverlay = true,\n        overlayColor = '#000',\n        overlayOpacity = 0.4,\n        zIndex = 100,\n        duration = 500,\n        direction,\n        size = 250,\n        className,\n        customIdSuffix,\n        lockBackgroundScroll = false,\n        overlayClassName = '',\n    } = props\n\n    const bodyRef = useRef<HTMLBodyElement | null>(null)\n\n    useEffect(() => {\n        const updatePageScroll = () => {\n            bodyRef.current = window.document.querySelector('body')\n\n            if (bodyRef.current && lockBackgroundScroll) {\n                if (open) {\n                    bodyRef.current.style.overflow = 'hidden'\n                } else {\n                    bodyRef.current.style.overflow = ''\n                }\n            }\n        }\n\n        updatePageScroll()\n    }, [open])\n\n    const idSuffix = useMemo(() => {\n        return customIdSuffix || (Math.random() + 1).toString(36).substring(7)\n    }, [customIdSuffix])\n\n    const overlayStyles: CSSProperties = {\n        backgroundColor: `${overlayColor}`,\n        opacity: `${overlayOpacity}`,\n        zIndex: zIndex,\n    }\n\n    const drawerStyles: CSSProperties = {\n        zIndex: zIndex + 1,\n        transitionDuration: `${duration}ms`,\n        ...getDirectionStyle(direction, size),\n        ...style,\n    }\n\n    return (\n        <div id={'EZDrawer' + idSuffix} className='EZDrawer'>\n            <input\n                type='checkbox'\n                id={'EZDrawer__checkbox' + idSuffix}\n                className='EZDrawer__checkbox'\n                onChange={onClose}\n                checked={open}\n            />\n            <nav\n                role='navigation'\n                id={'EZDrawer__container' + idSuffix}\n                style={drawerStyles}\n                className={'EZDrawer__container ' + className}\n            >\n                {children}\n            </nav>\n            {enableOverlay && (\n                <label\n                    htmlFor={'EZDrawer__checkbox' + idSuffix}\n                    id={'EZDrawer__overlay' + idSuffix}\n                    className={'EZDrawer__overlay ' + overlayClassName}\n                    style={overlayStyles}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default EZDrawer\n"],
  "mappings": "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",
  "names": ["getDirectionStyle", "dir", "size", "top", "left", "transform", "width", "height", "right", "bottom", "EZDrawer", "props", "open", "onClose", "children", "style", "enableOverlay", "overlayColor", "overlayOpacity", "zIndex", "duration", "direction", "className", "customIdSuffix", "lockBackgroundScroll", "overlayClassName", "bodyRef", "useRef", "useEffect", "updatePageScroll", "current", "window", "document", "querySelector", "overflow", "idSuffix", "useMemo", "Math", "random", "toString", "substring", "overlayStyles", "backgroundColor", "opacity", "drawerStyles", "transitionDuration", "React", "id", "type", "onChange", "checked", "role", "htmlFor"]
}
